// <auto-generated />
using System;
using ElectronicsStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElectronicsStore.Migrations
{
    [DbContext(typeof(ElectronicsStoreContext))]
    [Migration("20250617201307_FixCartItemModel")]
    partial class FixCartItemModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("ElectronicsStore.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique();

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ElectronicsStore.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 401, DateTimeKind.Utc).AddTicks(9620),
                            Description = "CPUs and microprocessors",
                            IsActive = true,
                            Name = "Processors"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(120),
                            Description = "RAM and storage devices",
                            IsActive = true,
                            Name = "Memory"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(130),
                            Description = "GPUs and video cards",
                            IsActive = true,
                            Name = "Graphics Cards"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(130),
                            Description = "Computer motherboards and mainboards",
                            IsActive = true,
                            Name = "Motherboards"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(130),
                            Description = "Hard drives, SSDs, and storage solutions",
                            IsActive = true,
                            Name = "Storage"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(130),
                            Description = "PSUs and power management",
                            IsActive = true,
                            Name = "Power Supplies"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(130),
                            Description = "Fans, coolers, and thermal solutions",
                            IsActive = true,
                            Name = "Cooling"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(130),
                            Description = "Computer cases and chassis",
                            IsActive = true,
                            Name = "Cases"
                        });
                });

            modelBuilder.Entity("ElectronicsStore.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("GrandTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ShippingCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingFirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingLastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Tax")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ElectronicsStore.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ElectronicsStore.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Intel",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(3440),
                            Description = "12th Gen Intel Core processor",
                            IsActive = true,
                            IsFeatured = true,
                            Model = "i7-12700K",
                            Name = "Intel Core i7-12700K",
                            Price = 399.99m,
                            StockQuantity = 50,
                            UpdatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(3440)
                        },
                        new
                        {
                            Id = 2,
                            Brand = "AMD",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4660),
                            Description = "8-core, 16-thread desktop processor",
                            IsActive = true,
                            IsFeatured = true,
                            Model = "5800X",
                            Name = "AMD Ryzen 7 5800X",
                            Price = 299.99m,
                            StockQuantity = 30,
                            UpdatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4660)
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Corsair",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4660),
                            Description = "High-performance DDR4 memory",
                            IsActive = true,
                            IsFeatured = false,
                            Model = "CMK16GX4M2B3200C16",
                            Name = "Corsair Vengeance LPX 16GB DDR4",
                            Price = 79.99m,
                            StockQuantity = 100,
                            UpdatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4660)
                        },
                        new
                        {
                            Id = 4,
                            Brand = "G.Skill",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4660),
                            Description = "RGB DDR4 memory kit",
                            IsActive = true,
                            IsFeatured = false,
                            Model = "F4-3200C16D-32GTZR",
                            Name = "G.Skill Trident Z RGB 32GB DDR4",
                            Price = 149.99m,
                            StockQuantity = 25,
                            UpdatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4660)
                        },
                        new
                        {
                            Id = 5,
                            Brand = "NVIDIA",
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4660),
                            Description = "High-performance graphics card",
                            DiscountPrice = 549.99m,
                            IsActive = true,
                            IsFeatured = true,
                            Model = "RTX 4070",
                            Name = "NVIDIA RTX 4070",
                            Price = 599.99m,
                            StockQuantity = 15,
                            UpdatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4660)
                        },
                        new
                        {
                            Id = 6,
                            Brand = "AMD",
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4960),
                            Description = "RDNA 3 graphics card",
                            IsActive = true,
                            IsFeatured = false,
                            Model = "RX 7800 XT",
                            Name = "AMD Radeon RX 7800 XT",
                            Price = 499.99m,
                            StockQuantity = 20,
                            UpdatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4960)
                        },
                        new
                        {
                            Id = 7,
                            Brand = "ASUS",
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4960),
                            Description = "ATX gaming motherboard",
                            IsActive = true,
                            IsFeatured = false,
                            Model = "ROG-STRIX-B550-F-GAMING",
                            Name = "ASUS ROG Strix B550-F Gaming",
                            Price = 189.99m,
                            StockQuantity = 40,
                            UpdatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4960)
                        },
                        new
                        {
                            Id = 8,
                            Brand = "MSI",
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4960),
                            Description = "Intel Z690 motherboard",
                            IsActive = true,
                            IsFeatured = false,
                            Model = "MPG-Z690-CARBON-WIFI",
                            Name = "MSI MPG Z690 Carbon",
                            Price = 299.99m,
                            StockQuantity = 25,
                            UpdatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4960)
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Samsung",
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4960),
                            Description = "High-speed NVMe SSD",
                            IsActive = true,
                            IsFeatured = true,
                            Model = "MZ-V8P1T0B/AM",
                            Name = "Samsung 980 PRO 1TB NVMe SSD",
                            Price = 129.99m,
                            StockQuantity = 60,
                            UpdatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4960)
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Western Digital",
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4960),
                            Description = "High-performance hard drive",
                            IsActive = true,
                            IsFeatured = false,
                            Model = "WD2003FZEX",
                            Name = "Western Digital Black 2TB HDD",
                            Price = 89.99m,
                            StockQuantity = 80,
                            UpdatedAt = new DateTime(2025, 6, 17, 20, 13, 7, 402, DateTimeKind.Utc).AddTicks(4970)
                        });
                });

            modelBuilder.Entity("ElectronicsStore.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ElectronicsStore.Models.CartItem", b =>
                {
                    b.HasOne("ElectronicsStore.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicsStore.Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElectronicsStore.Models.Order", b =>
                {
                    b.HasOne("ElectronicsStore.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElectronicsStore.Models.OrderItem", b =>
                {
                    b.HasOne("ElectronicsStore.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicsStore.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ElectronicsStore.Models.Product", b =>
                {
                    b.HasOne("ElectronicsStore.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ElectronicsStore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ElectronicsStore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicsStore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ElectronicsStore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicsStore.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ElectronicsStore.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ElectronicsStore.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ElectronicsStore.Models.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
