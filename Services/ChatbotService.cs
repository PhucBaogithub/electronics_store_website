using ElectronicsStore.Models;
using ElectronicsStore.Models.DTOs;
using ElectronicsStore.Data;
using Microsoft.EntityFrameworkCore;
using System.Text.Json;
using System.Text.RegularExpressions;
using System.Text;

namespace ElectronicsStore.Services
{
    public interface IChatbotService
    {
        Task<ChatMessage> GenerateBotResponseAsync(string userMessage, string conversationId, User? currentUser);
        Task<List<ProductRecommendationDTO>> SearchProductsAsync(string query);
        string GetGreetingResponse();
        string GetHelpResponse();
    }

    public class ChatbotService : IChatbotService
    {
        private readonly ElectronicsStoreContext _context;
        private readonly ILogger<ChatbotService> _logger;

        // T·ª´ kh√≥a v√† m·∫´u c√¢u tr·∫£ l·ªùi
        private readonly Dictionary<string, List<string>> _responsePatterns;
        private readonly Dictionary<string, string> _quickResponses;

        public ChatbotService(ElectronicsStoreContext context, ILogger<ChatbotService> logger)
        {
            _context = context;
            _logger = logger;
            _responsePatterns = new Dictionary<string, List<string>>();
            _quickResponses = new Dictionary<string, string>();
            InitializeResponsePatterns();
        }

        private void InitializeResponsePatterns()
        {
            // Initialize response patterns
            _responsePatterns.Add("greeting", new List<string>
            {
                "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Electronics Store. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m, ki·ªÉm tra ƒë∆°n h√†ng, ho·∫∑c tr·∫£ l·ªùi c√°c c√¢u h·ªèi. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?",
                "Ch√†o b·∫°n! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n h√¥m nay. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ s·∫£n ph·∫©m ƒëi·ªán t·ª≠, ƒë∆°n h√†ng, ho·∫∑c c√°c th√¥ng tin kh√°c. B·∫°n mu·ªën bi·∫øt g√¨?",
                "Hello! T√¥i l√† chatbot c·ªßa Electronics Store. T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªÅ m·ªçi th·ª© li√™n quan ƒë·∫øn c·ª≠a h√†ng. H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn g√¨ nh√©!"
            });

            _responsePatterns.Add("product_search", new List<string>
            {
                "T√¥i s·∫Ω t√¨m ki·∫øm s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n...",
                "ƒê·ªÉ t√¨m s·∫£n ph·∫©m t·ªët nh·∫•t cho b·∫°n, h√£y cho t√¥i bi·∫øt th√™m v·ªÅ:",
                "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m. B·∫°n ƒëang quan t√¢m ƒë·∫øn lo·∫°i n√†o?"
            });

            _responsePatterns.Add("order_inquiry", new List<string>
            {
                "ƒê·ªÉ ki·ªÉm tra ƒë∆°n h√†ng, b·∫°n c√≥ th·ªÉ:",
                "Th√¥ng tin ƒë∆°n h√†ng c·ªßa b·∫°n:",
                "T√¥i s·∫Ω gi√∫p b·∫°n ki·ªÉm tra t√¨nh tr·∫°ng ƒë∆°n h√†ng"
            });

            _responsePatterns.Add("technical_support", new List<string>
            {
                "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ c√°c v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t:",
                "ƒê·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t, h√£y m√¥ t·∫£ chi ti·∫øt:",
                "ƒê·ªôi ng≈© k·ªπ thu·∫≠t c·ªßa ch√∫ng t√¥i c√≥ th·ªÉ h·ªó tr·ª£:"
            });

            _responsePatterns.Add("warranty", new List<string>
            {
                "Ch√≠nh s√°ch b·∫£o h√†nh c·ªßa Electronics Store:",
                "Th√¥ng tin b·∫£o h√†nh s·∫£n ph·∫©m:",
                "V·ªÅ b·∫£o h√†nh, ch√∫ng t√¥i cam k·∫øt:"
            });

            _responsePatterns.Add("price_inquiry", new List<string>
            {
                "V·ªÅ gi√° c·∫£ s·∫£n ph·∫©m:",
                "Th√¥ng tin gi√° v√† khuy·∫øn m√£i:",
                "Gi√° s·∫£n ph·∫©m hi·ªán t·∫°i:"
            });

            _responsePatterns.Add("shipping", new List<string>
            {
                "Th√¥ng tin v·ªÅ giao h√†ng:",
                "Ch√≠nh s√°ch v·∫≠n chuy·ªÉn c·ªßa ch√∫ng t√¥i:",
                "V·ªÅ vi·ªác giao h√†ng:"
            });

            _responsePatterns.Add("payment", new List<string>
            {
                "C√°c ph∆∞∆°ng th·ª©c thanh to√°n ƒë∆∞·ª£c h·ªó tr·ª£:",
                "V·ªÅ thanh to√°n:",
                "Ch√∫ng t√¥i ch·∫•p nh·∫≠n c√°c h√¨nh th·ª©c thanh to√°n:"
            });

            // Initialize quick responses
            _quickResponses["c·∫£m ∆°n"] = "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! N·∫øu c√≥ th√™m c√¢u h·ªèi n√†o kh√°c, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi t√¥i nh√©! üòä";
            _quickResponses["t·∫°m bi·ªát"] = "T·∫°m bi·ªát v√† c·∫£m ∆°n b·∫°n ƒë√£ gh√© thƒÉm Electronics Store! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! üëã";
            _quickResponses["ok"] = "Tuy·ªát v·ªùi! C√≤n g√¨ kh√°c t√¥i c√≥ th·ªÉ gi√∫p b·∫°n kh√¥ng?";
            _quickResponses["kh√¥ng"] = "ƒê∆∞·ª£c r·ªìi! N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£ g√¨ kh√°c, h√£y cho t√¥i bi·∫øt nh√©!";
            _quickResponses["c√≥"] = "T·ªët! H√£y cho t√¥i bi·∫øt chi ti·∫øt h∆°n ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t.";
            _quickResponses["help"] = "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ: üîç T√¨m s·∫£n ph·∫©m, üì¶ Ki·ªÉm tra ƒë∆°n h√†ng, üõ†Ô∏è H·ªó tr·ª£ k·ªπ thu·∫≠t, üõ°Ô∏è B·∫£o h√†nh, üí∞ Gi√° c·∫£, üöö Giao h√†ng, üí≥ Thanh to√°n";
        }

        public async Task<ChatMessage> GenerateBotResponseAsync(string userMessage, string conversationId, User? currentUser)
        {
            var message = NormalizeVietnameseText(userMessage.ToLower().Trim());
            var responseText = "";
            var messageType = ChatMessageType.Text;
            string? productData = null;

            try
            {
                // Ki·ªÉm tra quick responses tr∆∞·ªõc
                var quickResponse = GetQuickResponse(message);
                if (!string.IsNullOrEmpty(quickResponse))
                {
                    responseText = quickResponse;
                }
                // T√¨m ki·∫øm s·∫£n ph·∫©m
                else if (IsProductSearchQuery(message))
                {
                    var products = await SearchProductsAsync(message);
                    if (products.Any())
                    {
                        responseText = FormatProductSearchResponse(products, message);
                        messageType = ChatMessageType.ProductRecommendation;
                        productData = JsonSerializer.Serialize(products);
                    }
                    else
                    {
                        responseText = "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠:\n" +
                                     "‚Ä¢ M√¥ t·∫£ chi ti·∫øt h∆°n v·ªÅ s·∫£n ph·∫©m\n" +
                                     "‚Ä¢ S·ª≠ d·ª•ng t·ª´ kh√≥a kh√°c\n" +
                                     "‚Ä¢ Li√™n h·ªá nh√¢n vi√™n t∆∞ v·∫•n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp";
                    }
                }
                // Ki·ªÉm tra ƒë∆°n h√†ng
                else if (IsOrderInquiry(message))
                {
                    responseText = GetOrderInquiryResponse(currentUser);
                }
                // H·ªó tr·ª£ k·ªπ thu·∫≠t
                else if (IsTechnicalSupport(message))
                {
                    responseText = GetTechnicalSupportResponse();
                }
                // B·∫£o h√†nh
                else if (IsWarrantyInquiry(message))
                {
                    responseText = GetWarrantyResponse();
                }
                // Gi√° c·∫£
                else if (IsPriceInquiry(message))
                {
                    responseText = GetPriceInquiryResponse();
                }
                // Giao h√†ng
                else if (IsShippingInquiry(message))
                {
                    responseText = GetShippingResponse();
                }
                // Thanh to√°n
                else if (IsPaymentInquiry(message))
                {
                    responseText = GetPaymentResponse();
                }
                // Ch√†o h·ªèi
                else if (IsGreeting(message))
                {
                    responseText = GetRandomResponse("greeting");
                }
                // Y√™u c·∫ßu h·ªó tr·ª£ nh√¢n vi√™n
                else if (IsHumanSupportRequest(message))
                {
                    responseText = GetHumanSupportResponse();
                    messageType = ChatMessageType.EscalateToHuman;
                }
                // Ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh
                else
                {
                    responseText = GetDefaultResponse(message);
                }

                return new ChatMessage
                {
                    ConversationId = conversationId,
                    Message = responseText,
                    IsFromUser = false,
                    MessageType = messageType,
                    ProductData = productData,
                    CreatedAt = DateTime.UtcNow
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating bot response for message: {Message}", userMessage);
                return new ChatMessage
                {
                    ConversationId = conversationId,
                    Message = "Xin l·ªói, t√¥i g·∫∑p m·ªôt ch√∫t v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá nh√¢n vi√™n h·ªó tr·ª£.",
                    IsFromUser = false,
                    MessageType = ChatMessageType.Text,
                    CreatedAt = DateTime.UtcNow
                };
            }
        }

        public async Task<List<ProductRecommendationDTO>> SearchProductsAsync(string query)
        {
            var normalizedQuery = NormalizeVietnameseText(query);
            var keywords = ExtractKeywords(normalizedQuery);

            var products = await _context.Products
                .Include(p => p.Category)
                .Where(p => p.IsActive && keywords.Any(k =>
                    p.Name.ToLower().Contains(k) ||
                    p.Description.ToLower().Contains(k) ||
                    p.Brand.ToLower().Contains(k) ||
                    p.Category!.Name.ToLower().Contains(k)))
                .OrderByDescending(p => p.IsFeatured)
                .ThenBy(p => (double)p.Price)
                .Take(5)
                .Select(p => new ProductRecommendationDTO
                {
                    ProductId = p.Id,
                    Name = p.Name,
                    Brand = p.Brand,
                    Price = p.Price,
                    DiscountPrice = p.DiscountPrice,
                    ImageUrl = p.ImageUrl,
                    CategoryName = p.Category!.Name,
                    IsInStock = p.StockQuantity > 0,
                    ProductUrl = $"/Home/ProductDetail/{p.Id}"
                })
                .ToListAsync();

            return products;
        }

        public string GetGreetingResponse()
        {
            return GetRandomResponse("greeting");
        }

        public string GetHelpResponse()
        {
            return _quickResponses["help"];
        }

        private string FormatProductSearchResponse(List<ProductRecommendationDTO> products, string query)
        {
            var response = new StringBuilder();
            response.AppendLine($"T√¥i t√¨m th·∫•y {products.Count} s·∫£n ph·∫©m ph√π h·ª£p v·ªõi \"{query}\":");
            response.AppendLine();

            for (int i = 0; i < products.Count; i++)
            {
                var product = products[i];
                response.AppendLine($"{i + 1}. {product.Name}");
                response.AppendLine($"   Th∆∞∆°ng hi·ªáu: {product.Brand}");
                response.AppendLine($"   Danh m·ª•c: {product.CategoryName}");

                if (product.DiscountPrice.HasValue)
                {
                    response.AppendLine($"   Gi√°: {product.Price:N0}‚Ç´ -> {product.DiscountPrice:N0}‚Ç´ (Gi·∫£m gi√°!)");
                }
                else
                {
                    response.AppendLine($"   Gi√°: {product.Price:N0}‚Ç´");
                }

                response.AppendLine($"   T√¨nh tr·∫°ng: {(product.IsInStock ? "C√≤n h√†ng" : "H·∫øt h√†ng")}");

                if (i < products.Count - 1)
                {
                    response.AppendLine();
                }
            }

            response.AppendLine();
            response.AppendLine("B·∫°n c√≥ th·ªÉ:");
            response.AppendLine("‚Ä¢ Nh·∫•n v√†o t√™n s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt");
            response.AppendLine("‚Ä¢ H·ªèi th√™m v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ");
            response.AppendLine("‚Ä¢ Y√™u c·∫ßu so s√°nh gi·ªØa c√°c s·∫£n ph·∫©m");
            response.AppendLine("‚Ä¢ Li√™n h·ªá nh√¢n vi√™n ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n th√™m");

            return response.ToString();
        }

        // C√°c ph∆∞∆°ng th·ª©c helper
        private string NormalizeVietnameseText(string text)
        {
            // Lo·∫°i b·ªè d·∫•u c√¢u v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
            text = Regex.Replace(text, @"[^\w\s]", " ");
            // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
            text = Regex.Replace(text, @"\s+", " ");
            return text.Trim();
        }

        private List<string> ExtractKeywords(string text)
        {
            var stopWords = new HashSet<string> { "t√¥i", "b·∫°n", "c·ªßa", "v√†", "c√≥", "l√†", "trong", "v·ªõi", "ƒë·ªÉ", "m·ªôt", "c√°c", "n√†y", "ƒë√≥", "cho", "v·ªÅ", "t·ª´", "nh∆∞", "s·∫Ω", "ƒë∆∞·ª£c", "hay", "ho·∫∑c", "n√†o", "g√¨", "ai", "ƒë√¢u", "khi", "n·∫øu", "th√¨" };
            
            return text.Split(' ')
                      .Where(word => word.Length > 2 && !stopWords.Contains(word))
                      .Distinct()
                      .ToList();
        }

        private string GetQuickResponse(string message)
        {
            foreach (var kvp in _quickResponses)
            {
                if (message.Contains(kvp.Key))
                {
                    return kvp.Value;
                }
            }
            return string.Empty;
        }

        private string GetRandomResponse(string category)
        {
            if (_responsePatterns.ContainsKey(category))
            {
                var responses = _responsePatterns[category];
                var random = new Random();
                return responses[random.Next(responses.Count)];
            }
            return "T√¥i hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n v√† s·∫Ω c·ªë g·∫Øng h·ªó tr·ª£ t·ªët nh·∫•t.";
        }

        private bool IsProductSearchQuery(string message)
        {
            var productKeywords = new[] { "t√¨m", "mua", "s·∫£n ph·∫©m", "laptop", "ƒëi·ªán tho·∫°i", "m√°y t√≠nh", "tai nghe", "chu·ªôt", "b√†n ph√≠m", "m√†n h√¨nh", "camera", "loa", "tivi", "t·ªß l·∫°nh", "m√°y gi·∫∑t", "ƒëi·ªÅu h√≤a", "smartphone", "tablet", "iphone", "samsung", "dell", "hp", "asus", "acer", "sony", "lg", "xiaomi", "oppo", "vivo", "realme" };
            return productKeywords.Any(keyword => message.Contains(keyword));
        }

        private bool IsOrderInquiry(string message)
        {
            var orderKeywords = new[] { "ƒë∆°n h√†ng", "order", "ki·ªÉm tra", "t√¨nh tr·∫°ng", "giao h√†ng", "v·∫≠n chuy·ªÉn", "ship" };
            return orderKeywords.Any(keyword => message.Contains(keyword));
        }

        private bool IsTechnicalSupport(string message)
        {
            var techKeywords = new[] { "h·ªó tr·ª£", "k·ªπ thu·∫≠t", "l·ªói", "s·ª≠a ch·ªØa", "kh√¥ng ho·∫°t ƒë·ªông", "b·ªã h·ªèng", "c√†i ƒë·∫∑t", "h∆∞·ªõng d·∫´n", "c√°ch s·ª≠ d·ª•ng" };
            return techKeywords.Any(keyword => message.Contains(keyword));
        }

        private bool IsWarrantyInquiry(string message)
        {
            var warrantyKeywords = new[] { "b·∫£o h√†nh", "warranty", "ƒë·ªïi tr·∫£", "b·∫£o hi·ªÉm" };
            return warrantyKeywords.Any(keyword => message.Contains(keyword));
        }

        private bool IsPriceInquiry(string message)
        {
            var priceKeywords = new[] { "gi√°", "price", "bao nhi√™u", "ti·ªÅn", "cost", "khuy·∫øn m√£i", "gi·∫£m gi√°", "sale" };
            return priceKeywords.Any(keyword => message.Contains(keyword));
        }

        private bool IsShippingInquiry(string message)
        {
            var shippingKeywords = new[] { "giao h√†ng", "v·∫≠n chuy·ªÉn", "ship", "delivery", "ph√≠ ship", "mi·ªÖn ph√≠" };
            return shippingKeywords.Any(keyword => message.Contains(keyword));
        }

        private bool IsPaymentInquiry(string message)
        {
            var paymentKeywords = new[] { "thanh to√°n", "payment", "tr·∫£ ti·ªÅn", "th·∫ª", "chuy·ªÉn kho·∫£n", "cod", "visa", "mastercard", "momo", "zalopay" };
            return paymentKeywords.Any(keyword => message.Contains(keyword));
        }

        private bool IsGreeting(string message)
        {
            var greetingKeywords = new[] { "xin ch√†o", "ch√†o", "hello", "hi", "hey", "good morning", "good afternoon", "good evening" };
            return greetingKeywords.Any(keyword => message.Contains(keyword));
        }

        private bool IsHumanSupportRequest(string message)
        {
            var humanKeywords = new[] { "nh√¢n vi√™n", "t∆∞ v·∫•n", "g·ªçi", "li√™n h·ªá", "support", "admin", "operator", "ng∆∞·ªùi th·∫≠t" };
            return humanKeywords.Any(keyword => message.Contains(keyword));
        }

        private string GetOrderInquiryResponse(User? currentUser)
        {
            if (currentUser != null)
            {
                return GetRandomResponse("order_inquiry") + "\n" +
                       "‚Ä¢ Truy c·∫≠p 'ƒê∆°n h√†ng c·ªßa t√¥i' trong menu t√†i kho·∫£n\n" +
                       "‚Ä¢ Ki·ªÉm tra email x√°c nh·∫≠n ƒë∆°n h√†ng\n" +
                       "‚Ä¢ G·ªçi hotline: (028) 1234-5678 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp\n\n" +
                       "B·∫°n c√≥ c·∫ßn h·ªó tr·ª£ g√¨ kh√°c v·ªÅ ƒë∆°n h√†ng kh√¥ng?";
            }
            else
            {
                return "ƒê·ªÉ ki·ªÉm tra ƒë∆°n h√†ng, b·∫°n c·∫ßn:\n" +
                       "‚Ä¢ ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n\n" +
                       "‚Ä¢ Ho·∫∑c cung c·∫•p m√£ ƒë∆°n h√†ng v√† email\n" +
                       "‚Ä¢ Li√™n h·ªá hotline: (028) 1234-5678\n\n" +
                       "T√¥i c√≥ th·ªÉ h∆∞·ªõng d·∫´n b·∫°n ƒëƒÉng nh·∫≠p kh√¥ng?";
            }
        }

        private string GetTechnicalSupportResponse()
        {
            return GetRandomResponse("technical_support") + "\n" +
                   "üõ†Ô∏è **H·ªó tr·ª£ k·ªπ thu·∫≠t 24/7:**\n" +
                   "‚Ä¢ H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t v√† s·ª≠ d·ª•ng s·∫£n ph·∫©m\n" +
                   "‚Ä¢ Kh·∫Øc ph·ª•c s·ª± c·ªë ph·∫ßn m·ªÅm\n" +
                   "‚Ä¢ T∆∞ v·∫•n n√¢ng c·∫•p v√† b·∫£o tr√¨\n" +
                   "‚Ä¢ H·ªó tr·ª£ t·ª´ xa qua TeamViewer\n\n" +
                   "üìû **Li√™n h·ªá:**\n" +
                   "‚Ä¢ Hotline: (028) 1234-5678\n" +
                   "‚Ä¢ Email: tech@electronicsstore.com\n" +
                   "‚Ä¢ Chat tr·ª±c ti·∫øp: ƒêang k·∫øt n·ªëi...\n\n" +
                   "B·∫°n g·∫∑p v·∫•n ƒë·ªÅ g√¨ c·ª• th·ªÉ v·ªõi s·∫£n ph·∫©m?";
        }

        private string GetWarrantyResponse()
        {
            return GetRandomResponse("warranty") + "\n" +
                   "üõ°Ô∏è **Ch√≠nh s√°ch b·∫£o h√†nh to√†n di·ªán:**\n" +
                   "‚Ä¢ B·∫£o h√†nh ch√≠nh h√£ng: 12-36 th√°ng\n" +
                   "‚Ä¢ ƒê·ªïi tr·∫£ mi·ªÖn ph√≠ trong 7 ng√†y ƒë·∫ßu\n" +
                   "‚Ä¢ S·ª≠a ch·ªØa mi·ªÖn ph√≠ trong th·ªùi gian b·∫£o h√†nh\n" +
                   "‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t su·ªët ƒë·ªùi s·∫£n ph·∫©m\n" +
                   "‚Ä¢ B·∫£o h√†nh t·∫°i 200+ trung t√¢m ·ªßy quy·ªÅn\n\n" +
                   "üìã **ƒêi·ªÅu ki·ªán b·∫£o h√†nh:**\n" +
                   "‚Ä¢ S·∫£n ph·∫©m c√≤n nguy√™n tem b·∫£o h√†nh\n" +
                   "‚Ä¢ C√≥ h√≥a ƒë∆°n mua h√†ng\n" +
                   "‚Ä¢ Kh√¥ng c√≥ d·∫•u hi·ªáu va ƒë·∫≠p, ng·∫•m n∆∞·ªõc\n\n" +
                   "B·∫°n c·∫ßn ki·ªÉm tra b·∫£o h√†nh cho s·∫£n ph·∫©m n√†o?";
        }

        private string GetPriceInquiryResponse()
        {
            return GetRandomResponse("price_inquiry") + "\n" +
                   "üí∞ **Ch√≠nh s√°ch gi√° t·ªët nh·∫•t:**\n" +
                   "‚Ä¢ Cam k·∫øt gi√° t·ªët nh·∫•t th·ªã tr∆∞·ªùng\n" +
                   "‚Ä¢ Ho√†n ti·ªÅn n·∫øu t√¨m th·∫•y gi√° r·∫ª h∆°n\n" +
                   "‚Ä¢ Khuy·∫øn m√£i ƒë·∫∑c bi·ªát m·ªói tu·∫ßn\n" +
                   "‚Ä¢ Gi·∫£m gi√° th√™m cho kh√°ch h√†ng th√¢n thi·∫øt\n\n" +
                   "üéÅ **∆Øu ƒë√£i hi·ªán t·∫°i:**\n" +
                   "‚Ä¢ Gi·∫£m 10% cho ƒë∆°n h√†ng tr√™n 5 tri·ªáu\n" +
                   "‚Ä¢ T·∫∑ng ph·ª• ki·ªán khi mua laptop\n" +
                   "‚Ä¢ Tr·∫£ g√≥p 0% l√£i su·∫•t\n\n" +
                   "B·∫°n quan t√¢m ƒë·∫øn s·∫£n ph·∫©m n√†o ƒë·ªÉ t√¥i b√°o gi√° c·ª• th·ªÉ?";
        }

        private string GetShippingResponse()
        {
            return GetRandomResponse("shipping") + "\n" +
                   "üöö **D·ªãch v·ª• giao h√†ng nhanh ch√≥ng:**\n" +
                   "‚Ä¢ Giao h√†ng nhanh trong 2-4 gi·ªù (n·ªôi th√†nh)\n" +
                   "‚Ä¢ Giao h√†ng to√†n qu·ªëc 1-3 ng√†y\n" +
                   "‚Ä¢ Mi·ªÖn ph√≠ ship cho ƒë∆°n h√†ng tr√™n 500k\n" +
                   "‚Ä¢ Giao h√†ng t·∫≠n n∆°i, ki·ªÉm tra tr∆∞·ªõc khi nh·∫≠n\n\n" +
                   "üì¶ **C√°c h√¨nh th·ª©c giao h√†ng:**\n" +
                   "‚Ä¢ Giao h√†ng ti√™u chu·∫©n: 15,000ƒë\n" +
                   "‚Ä¢ Giao h√†ng nhanh: 25,000ƒë\n" +
                   "‚Ä¢ Giao h√†ng si√™u t·ªëc: 35,000ƒë\n\n" +
                   "B·∫°n mu·ªën ƒë·∫∑t h√†ng v·ªõi h√¨nh th·ª©c giao h√†ng n√†o?";
        }

        private string GetPaymentResponse()
        {
            return GetRandomResponse("payment") + "\n" +
                   "üí≥ **ƒêa d·∫°ng ph∆∞∆°ng th·ª©c thanh to√°n:**\n" +
                   "‚Ä¢ Thanh to√°n khi nh·∫≠n h√†ng (COD)\n" +
                   "‚Ä¢ Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n" +
                   "‚Ä¢ Th·∫ª t√≠n d·ª•ng/ghi n·ª£ (Visa, Mastercard)\n" +
                   "‚Ä¢ V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay, VNPay)\n" +
                   "‚Ä¢ Tr·∫£ g√≥p qua th·∫ª t√≠n d·ª•ng\n\n" +
                   "üè¶ **Th√¥ng tin chuy·ªÉn kho·∫£n:**\n" +
                   "‚Ä¢ Ng√¢n h√†ng: Vietcombank\n" +
                   "‚Ä¢ STK: 1234567890\n" +
                   "‚Ä¢ Ch·ªß TK: Electronics Store\n\n" +
                   "B·∫°n mu·ªën thanh to√°n b·∫±ng h√¨nh th·ª©c n√†o?";
        }

        private string GetHumanSupportResponse()
        {
            return "üôã‚Äç‚ôÇÔ∏è **K·∫øt n·ªëi v·ªõi nh√¢n vi√™n t∆∞ v·∫•n:**\n\n" +
                   "T√¥i s·∫Ω chuy·ªÉn b·∫°n ƒë·∫øn nh√¢n vi√™n t∆∞ v·∫•n chuy√™n nghi·ªáp:\n\n" +
                   "üìû **Li√™n h·ªá tr·ª±c ti·∫øp:**\n" +
                   "‚Ä¢ Hotline: (028) 1234-5678\n" +
                   "‚Ä¢ Email: support@electronicsstore.com\n" +
                   "‚Ä¢ Zalo: 0901234567\n\n" +
                   "üïê **Th·ªùi gian h·ªó tr·ª£:**\n" +
                   "‚Ä¢ Th·ª© 2 - Th·ª© 6: 8:00 - 17:00\n" +
                   "‚Ä¢ Th·ª© 7 - Ch·ªß nh·∫≠t: 8:00 - 12:00\n\n" +
                   "üí¨ **Chat tr·ª±c ti·∫øp:** ƒêang k·∫øt n·ªëi v·ªõi nh√¢n vi√™n...\n\n" +
                   "Nh√¢n vi√™n s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong v√≤ng 2-3 ph√∫t!";
        }

        private string GetDefaultResponse(string message)
        {
            var responses = new[]
            {
                "T√¥i hi·ªÉu b·∫°n ƒëang c·∫ßn h·ªó tr·ª£. ƒê·ªÉ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ:\n" +
                "üîç T√¨m ki·∫øm s·∫£n ph·∫©m c·ª• th·ªÉ\n" +
                "üì¶ H·ªèi v·ªÅ ƒë∆°n h√†ng\n" +
                "üõ†Ô∏è Y√™u c·∫ßu h·ªó tr·ª£ k·ªπ thu·∫≠t\n" +
                "üí∞ H·ªèi v·ªÅ gi√° c·∫£ v√† khuy·∫øn m√£i\n" +
                "üöö Th√¥ng tin giao h√†ng\n" +
                "üë®‚Äçüíº K·∫øt n·ªëi v·ªõi nh√¢n vi√™n t∆∞ v·∫•n",

                "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ:\n" +
                "‚Ä¢ T∆∞ v·∫•n s·∫£n ph·∫©m ƒëi·ªán t·ª≠\n" +
                "‚Ä¢ Ki·ªÉm tra ƒë∆°n h√†ng v√† giao h√†ng\n" +
                "‚Ä¢ Ch√≠nh s√°ch b·∫£o h√†nh v√† ƒë·ªïi tr·∫£\n" +
                "‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng s·∫£n ph·∫©m\n\n" +
                "H√£y m√¥ t·∫£ c·ª• th·ªÉ h∆°n v·ªÅ ƒëi·ªÅu b·∫°n c·∫ßn ƒë·ªÉ t√¥i h·ªó tr·ª£ t·ªët nh·∫•t nh√©!",

                "T√¥i mu·ªën gi√∫p b·∫°n nh∆∞ng ch∆∞a hi·ªÉu r√µ y√™u c·∫ßu. B·∫°n c√≥ th·ªÉ:\n" +
                "‚Ä¢ S·ª≠ d·ª•ng t·ª´ kh√≥a ƒë∆°n gi·∫£n h∆°n\n" +
                "‚Ä¢ M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ\n" +
                "‚Ä¢ Ch·ªçn m·ªôt trong c√°c ch·ªß ƒë·ªÅ: S·∫£n ph·∫©m, ƒê∆°n h√†ng, H·ªó tr·ª£, B·∫£o h√†nh\n" +
                "‚Ä¢ Ho·∫∑c g√µ 'help' ƒë·ªÉ xem danh s√°ch h·ªó tr·ª£"
            };

            var random = new Random();
            return responses[random.Next(responses.Length)];
        }
    }
}
