@{
    ViewData["Title"] = "Products";
}

<div class="page-content">
    <div class="container-fluid py-4">
    <div class="row">
        <!-- Filters Sidebar -->
        <div class="col-lg-3 col-md-4 mb-4">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="fas fa-filter"></i> Filters</h5>
                </div>
                <div class="card-body">
                    <!-- Categories Filter -->
                    <div class="mb-4">
                        <h6 class="fw-bold">Categories</h6>
                        <div id="categoriesFilter">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="category" value="" id="categoryAll" checked>
                                <label class="form-check-label" for="categoryAll">All Categories</label>
                            </div>
                            <!-- Categories will be loaded dynamically -->
                        </div>
                    </div>

                    <!-- Price Range Filter -->
                    <div class="mb-4">
                        <h6 class="fw-bold">Price Range</h6>
                        <div class="row">
                            <div class="col-6">
                                <input type="number" class="form-control form-control-sm" id="minPrice" placeholder="Min" min="0">
                            </div>
                            <div class="col-6">
                                <input type="number" class="form-control form-control-sm" id="maxPrice" placeholder="Max" min="0">
                            </div>
                        </div>
                    </div>

                    <!-- Brand Filter -->
                    <div class="mb-4">
                        <h6 class="fw-bold">Brands</h6>
                        <div id="brandsFilter">
                            <!-- Brands will be loaded dynamically -->
                        </div>
                    </div>

                    <!-- Stock Filter -->
                    <div class="mb-4">
                        <h6 class="fw-bold">Availability</h6>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="inStockOnly">
                            <label class="form-check-label" for="inStockOnly">In Stock Only</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="featuredOnly">
                            <label class="form-check-label" for="featuredOnly">Featured Products</label>
                        </div>
                    </div>

                    <!-- Clear Filters -->
                    <button class="btn btn-outline-secondary btn-sm w-100" onclick="clearFilters()">
                        <i class="fas fa-times"></i> Clear Filters
                    </button>
                </div>
            </div>
        </div>

        <!-- Products Area -->
        <div class="col-lg-9 col-md-8">
            <!-- Search and Sort Controls -->
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="input-group">
                                <input type="text" class="form-control" id="productSearch" placeholder="Search products...">
                                <button class="btn btn-outline-primary" type="button" onclick="searchProducts()">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="sortBy">
                                <option value="name">Sort by Name</option>
                                <option value="price">Sort by Price</option>
                                <option value="created">Sort by Date Added</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="sortOrder">
                                <option value="asc">Ascending</option>
                                <option value="desc">Descending</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Products Count and View Toggle -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <span id="productsCount" class="text-muted">Loading products...</span>
                </div>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-secondary active" id="gridViewBtn" onclick="toggleView('grid')">
                        <i class="fas fa-th-large"></i>
                    </button>
                    <button type="button" class="btn btn-outline-secondary" id="listViewBtn" onclick="toggleView('list')">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            </div>

            <!-- Loading State -->
            <div id="productsLoading" class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading products...</p>
            </div>

            <!-- Products Grid -->
            <div id="productsGrid" class="row g-4" style="display: none;">
                <!-- Products will be loaded dynamically -->
            </div>

            <!-- Products List View -->
            <div id="productsList" class="d-none">
                <!-- List view products will be loaded dynamically -->
            </div>

            <!-- No Products Message -->
            <div id="noProducts" class="text-center py-5" style="display: none;">
                <div class="mb-4">
                    <i class="fas fa-search fa-4x text-muted"></i>
                </div>
                <h4 class="text-muted">No products found</h4>
                <p class="text-muted">Try adjusting your filters or search terms.</p>
                <button class="btn btn-primary" onclick="clearFilters()">Clear Filters</button>
            </div>

            <!-- Pagination -->
            <nav aria-label="Products pagination" id="paginationContainer" style="display: none;">
                <ul class="pagination justify-content-center mt-4" id="pagination">
                    <!-- Pagination will be loaded dynamically -->
                </ul>
            </nav>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        let currentView = 'grid';
        const pageSize = 12;

        document.addEventListener('DOMContentLoaded', function() {
            loadCategories();
            loadProducts();
            setupEventListeners();
        });

        function setupEventListeners() {
            // Search on input with debouncing
            let searchTimeout;
            document.getElementById('productSearch').addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    currentPage = 1;
                    loadProducts();
                }, 500);
            });

            // Filter change listeners
            document.getElementById('minPrice').addEventListener('change', () => { currentPage = 1; loadProducts(); });
            document.getElementById('maxPrice').addEventListener('change', () => { currentPage = 1; loadProducts(); });
            document.getElementById('sortBy').addEventListener('change', () => { currentPage = 1; loadProducts(); });
            document.getElementById('sortOrder').addEventListener('change', () => { currentPage = 1; loadProducts(); });
            document.getElementById('inStockOnly').addEventListener('change', () => { currentPage = 1; loadProducts(); });
            document.getElementById('featuredOnly').addEventListener('change', () => { currentPage = 1; loadProducts(); });
        }

        async function loadCategories() {
            try {
                const response = await fetch('/api/categories');
                if (response.ok) {
                    const categories = await response.json();
                    displayCategories(categories);
                }
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }

        function displayCategories(categories) {
            const container = document.getElementById('categoriesFilter');
            const existingAll = container.querySelector('#categoryAll').parentElement;
            
            categories.forEach(category => {
                const div = document.createElement('div');
                div.className = 'form-check';
                div.innerHTML = `
                    <input class="form-check-input" type="radio" name="category" value="${category.id}" id="category${category.id}">
                    <label class="form-check-label" for="category${category.id}">${category.name}</label>
                `;
                container.appendChild(div);
                
                div.querySelector('input').addEventListener('change', () => { currentPage = 1; loadProducts(); });
            });
        }

        async function loadProducts() {
            const loading = document.getElementById('productsLoading');
            const grid = document.getElementById('productsGrid');
            const list = document.getElementById('productsList');
            const noProducts = document.getElementById('noProducts');
            const pagination = document.getElementById('paginationContainer');

            loading.style.display = 'block';
            grid.style.display = 'none';
            list.classList.add('d-none');
            noProducts.style.display = 'none';
            pagination.style.display = 'none';

            try {
                const filters = getFilters();
                const queryString = new URLSearchParams(filters).toString();
                const response = await fetch(`/api/products?${queryString}`);
                
                if (response.ok) {
                    const data = await response.json();
                    displayProducts(data.items, data);
                    updateProductsCount(data.totalCount);
                    updatePagination(data);
                } else {
                    showError('Failed to load products');
                }
            } catch (error) {
                console.error('Error loading products:', error);
                showError('Failed to load products');
            } finally {
                loading.style.display = 'none';
            }
        }

        function getFilters() {
            const categoryInputs = document.querySelectorAll('input[name="category"]');
            let selectedCategory = '';
            categoryInputs.forEach(input => {
                if (input.checked) selectedCategory = input.value;
            });

            return {
                page: currentPage,
                pageSize: pageSize,
                search: document.getElementById('productSearch').value,
                categoryId: selectedCategory,
                minPrice: document.getElementById('minPrice').value,
                maxPrice: document.getElementById('maxPrice').value,
                inStockOnly: document.getElementById('inStockOnly').checked,
                featuredOnly: document.getElementById('featuredOnly').checked,
                sortBy: document.getElementById('sortBy').value,
                sortOrder: document.getElementById('sortOrder').value
            };
        }

        function displayProducts(products, pageData) {
            const grid = document.getElementById('productsGrid');
            const list = document.getElementById('productsList');
            const noProducts = document.getElementById('noProducts');

            if (products && products.length > 0) {
                if (currentView === 'grid') {
                    displayGridView(products);
                    grid.style.display = 'flex';
                    list.classList.add('d-none');
                } else {
                    displayListView(products);
                    list.classList.remove('d-none');
                    grid.style.display = 'none';
                }
            } else {
                noProducts.style.display = 'block';
            }
        }

        function displayGridView(products) {
            const container = document.getElementById('productsGrid');
            container.innerHTML = products.map(product => `
                <div class="col-lg-4 col-md-6">
                    <div class="product-card card h-100 shadow-sm" onclick="window.location.href='/Home/ProductDetail/${product.id}'">
                        <div class="product-image-container position-relative">
                            <img src="${product.imageUrl || '/images/placeholder-product.jpg'}" 
                                 class="card-img-top product-image" alt="${product.name}">
                            ${product.hasDiscount ? '<span class="badge bg-danger position-absolute top-0 end-0 m-2">Sale</span>' : ''}
                            ${!product.isInStock ? '<span class="badge bg-secondary position-absolute top-0 start-0 m-2">Out of Stock</span>' : ''}
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h6 class="card-title">${product.name}</h6>
                            <p class="text-muted small mb-2">${product.brand} ${product.model}</p>
                            <p class="card-text text-muted small">${product.description.substring(0, 100)}${product.description.length > 100 ? '...' : ''}</p>
                            <div class="price-section mt-auto">
                                ${product.hasDiscount ? 
                                    `<span class="text-decoration-line-through text-muted">${product.price.toLocaleString()} VNĐ</span>
                                     <span class="h5 text-danger ms-2">${product.finalPrice.toLocaleString()} VNĐ</span>` :
                                    `<span class="h5 text-primary">${product.finalPrice.toLocaleString()} VNĐ</span>`
                                }
                            </div>
                            <div class="d-flex justify-content-between align-items-center mt-3">
                                <button class="btn btn-primary btn-sm" onclick="event.stopPropagation(); addToCart(${product.id})" 
                                        ${!product.isInStock ? 'disabled' : ''}>
                                    <i class="fas fa-cart-plus"></i> ${product.isInStock ? 'Add to Cart' : 'Out of Stock'}
                                </button>
                                <a href="/Home/ProductDetail/${product.id}" class="btn btn-outline-secondary btn-sm" onclick="event.stopPropagation()">
                                    <i class="fas fa-eye"></i> View
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function displayListView(products) {
            const container = document.getElementById('productsList');
            container.innerHTML = products.map(product => `
                <div class="card mb-3 shadow-sm product-card-list" onclick="window.location.href='/Home/ProductDetail/${product.id}'">
                    <div class="row g-0">
                        <div class="col-md-3">
                            <a href="/Home/ProductDetail/${product.id}">
                                <img src="${product.imageUrl || '/images/placeholder-product.jpg'}" 
                                     class="img-fluid rounded-start h-100" alt="${product.name}">
                            </a>
                        </div>
                        <div class="col-md-9">
                            <div class="card-body h-100 d-flex flex-column">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <a href="/Home/ProductDetail/${product.id}" class="text-decoration-none">
                                            <h5 class="card-title">${product.name}</h5>
                                        </a>
                                        <p class="text-muted">${product.brand} ${product.model}</p>
                                    </div>
                                    <div class="text-end">
                                        ${product.hasDiscount ? 
                                            `<span class="text-decoration-line-through text-muted d-block">${product.price.toLocaleString()} VNĐ</span>
                                             <span class="h4 text-danger">${product.finalPrice.toLocaleString()} VNĐ</span>` :
                                            `<span class="h4 text-primary">${product.finalPrice.toLocaleString()} VNĐ</span>`
                                        }
                                    </div>
                                </div>
                                <p class="card-text">${product.description}</p>
                                <div class="mt-auto d-flex justify-content-between align-items-center">
                                    <div>
                                        ${product.isInStock ? 
                                            `<span class="badge bg-success">In Stock (${product.stockQuantity})</span>` :
                                            `<span class="badge bg-danger">Out of Stock</span>`
                                        }
                                        ${product.isFeatured ? '<span class="badge bg-warning text-dark ms-2">Featured</span>' : ''}
                                    </div>
                                    <div>
                                        <button class="btn btn-primary me-2" onclick="event.stopPropagation(); addToCart(${product.id})" 
                                                ${!product.isInStock ? 'disabled' : ''}>
                                            <i class="fas fa-cart-plus"></i> ${product.isInStock ? 'Add to Cart' : 'Out of Stock'}
                                        </button>
                                        <a href="/Home/ProductDetail/${product.id}" class="btn btn-outline-secondary" onclick="event.stopPropagation()">
                                            <i class="fas fa-eye"></i> View Details
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function updateProductsCount(totalCount) {
            document.getElementById('productsCount').textContent = `Showing ${totalCount} products`;
        }

        function updatePagination(pageData) {
            const container = document.getElementById('paginationContainer');
            const pagination = document.getElementById('pagination');

            if (pageData.totalPages <= 1) {
                container.style.display = 'none';
                return;
            }

            let paginationHTML = '';

            // Previous button
            paginationHTML += `
                <li class="page-item ${!pageData.hasPreviousPage ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${pageData.page - 1})" ${!pageData.hasPreviousPage ? 'tabindex="-1"' : ''}>
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
            `;

            // Page numbers
            const startPage = Math.max(1, pageData.page - 2);
            const endPage = Math.min(pageData.totalPages, pageData.page + 2);

            if (startPage > 1) {
                paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="changePage(1)">1</a></li>`;
                if (startPage > 2) {
                    paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `
                    <li class="page-item ${i === pageData.page ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                    </li>
                `;
            }

            if (endPage < pageData.totalPages) {
                if (endPage < pageData.totalPages - 1) {
                    paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
                paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="changePage(${pageData.totalPages})">${pageData.totalPages}</a></li>`;
            }

            // Next button
            paginationHTML += `
                <li class="page-item ${!pageData.hasNextPage ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${pageData.page + 1})" ${!pageData.hasNextPage ? 'tabindex="-1"' : ''}>
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            `;

            pagination.innerHTML = paginationHTML;
            container.style.display = 'block';
        }

        function changePage(page) {
            if (page < 1) return;
            currentPage = page;
            loadProducts();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        function toggleView(view) {
            currentView = view;
            document.getElementById('gridViewBtn').classList.toggle('active', view === 'grid');
            document.getElementById('listViewBtn').classList.toggle('active', view === 'list');
            
            const grid = document.getElementById('productsGrid');
            const list = document.getElementById('productsList');
            
            if (grid.innerHTML || list.innerHTML) {
                if (view === 'grid') {
                    grid.style.display = 'flex';
                    list.classList.add('d-none');
                } else {
                    list.classList.remove('d-none');
                    grid.style.display = 'none';
                }
            }
        }

        function clearFilters() {
            document.getElementById('productSearch').value = '';
            document.getElementById('categoryAll').checked = true;
            document.getElementById('minPrice').value = '';
            document.getElementById('maxPrice').value = '';
            document.getElementById('inStockOnly').checked = false;
            document.getElementById('featuredOnly').checked = false;
            document.getElementById('sortBy').value = 'name';
            document.getElementById('sortOrder').value = 'asc';
            currentPage = 1;
            loadProducts();
        }

        function searchProducts() {
            currentPage = 1;
            loadProducts();
        }

        function showError(message) {
            showToast(message, 'danger');
        }

        async function addToCart(productId) {
            try {
                const formData = new FormData();
                formData.append('productId', productId);
                formData.append('quantity', 1);

                const response = await fetch('/Cart/AddToCart', {
                    method: 'POST',
                    body: formData,
                    credentials: 'include'  // Include cookies for authentication
                });

                // Check if response is a redirect to login
                if (response.redirected && response.url.includes('/Account/Login')) {
                    showLoginPrompt();
                    return;
                }

                if (response.ok) {
                    showToast('Đã thêm sản phẩm vào giỏ hàng!', 'success');
                    if (window.updateCartCount) {
                        window.updateCartCount();
                    }
                    
                    // Redirect to cart after 1.5 seconds
                    setTimeout(() => {
                        window.location.href = '/Cart';
                    }, 1500);
                } else if (response.status === 401 || response.status === 302) {
                    showLoginPrompt();
                } else {
                    try {
                        const errorText = await response.text();
                        showToast(errorText || 'Có lỗi xảy ra', 'danger');
                    } catch {
                        showToast('Có lỗi xảy ra', 'danger');
                    }
                }
            } catch (error) {
                console.error('Error adding to cart:', error);
                showToast('Có lỗi xảy ra khi thêm sản phẩm vào giỏ hàng', 'danger');
            }
        }

        function showLoginPrompt() {
            const modal = document.createElement('div');
            modal.className = 'modal fade';
            modal.innerHTML = `
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header bg-warning text-dark">
                            <h5 class="modal-title">
                                <i class="fas fa-sign-in-alt me-2"></i>Yêu cầu đăng nhập
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body text-center">
                            <i class="fas fa-user-lock fa-3x text-warning mb-3"></i>
                            <h5>Bạn cần đăng nhập để thêm sản phẩm vào giỏ hàng</h5>
                            <p class="text-muted">Vui lòng đăng nhập để tiếp tục mua sắm</p>
                        </div>
                        <div class="modal-footer justify-content-center">
                            <a href="/Account/Login?returnUrl=${encodeURIComponent(window.location.href)}" 
                               class="btn btn-primary">
                                <i class="fas fa-sign-in-alt me-2"></i>Đăng nhập
                            </a>
                            <a href="/Account/Register?returnUrl=${encodeURIComponent(window.location.href)}" 
                               class="btn btn-outline-primary">
                                <i class="fas fa-user-plus me-2"></i>Đăng ký
                            </a>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                <i class="fas fa-times me-2"></i>Đóng
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            const bsModal = new bootstrap.Modal(modal);
            bsModal.show();
            
            modal.addEventListener('hidden.bs.modal', () => {
                modal.remove();
            });
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 4000);
        }
    </script>
}

<style>
    .product-card {
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
    }

    .product-card-list {
        transition: all 0.3s ease;
    }

    .product-card-list:hover {
        box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
    }

    .product-image {
        height: 200px;
        object-fit: cover;
        transition: all 0.3s ease;
    }

    .product-card:hover .product-image {
        transform: scale(1.05);
    }

    .product-image-container {
        overflow: hidden;
    }

    .card-title {
        color: #333;
        transition: color 0.3s ease;
    }

    .product-card:hover .card-title,
    .product-card-list:hover .card-title {
        color: #007bff;
    }

    .btn {
        transition: all 0.3s ease;
    }

    .btn:hover {
        transform: translateY(-2px);
    }
</style> 