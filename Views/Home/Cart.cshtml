@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="container py-4">
    <div class="row">
        <div class="col-lg-8">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-shopping-cart"></i> Shopping Cart</h2>
                <button class="btn btn-outline-danger btn-sm" onclick="clearCart()" id="clearCartBtn" style="display: none;">
                    <i class="fas fa-trash"></i> Clear Cart
                </button>
            </div>

            <!-- Loading State -->
            <div id="cartLoading" class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading your cart...</p>
            </div>

            <!-- Cart Items -->
            <div id="cartItems">
                <!-- Cart items will be loaded dynamically -->
            </div>

            <!-- Empty Cart -->
            <div id="emptyCart" class="text-center py-5" style="display: none;">
                <div class="mb-4">
                    <i class="fas fa-shopping-cart fa-4x text-muted"></i>
                </div>
                <h4 class="text-muted">Your cart is empty</h4>
                <p class="text-muted">Add some products to get started.</p>
                <a href="/Home/Products" class="btn btn-primary">
                    <i class="fas fa-arrow-left"></i> Continue Shopping
                </a>
            </div>
        </div>

        <!-- Cart Summary -->
        <div class="col-lg-4">
            <div class="card shadow-sm" id="cartSummary" style="display: none;">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="fas fa-calculator"></i> Order Summary</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal:</span>
                        <span id="subtotal">0 VNĐ</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Shipping:</span>
                        <span id="shipping">Free</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Tax:</span>
                        <span id="tax">0 VNĐ</span>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between mb-3">
                        <strong>Total:</strong>
                        <strong id="total" class="text-primary h5">0 VNĐ</strong>
                    </div>
                    
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary btn-lg" onclick="proceedToCheckout()">
                            <i class="fas fa-credit-card"></i> Proceed to Checkout
                        </button>
                        <a href="/Home/Products" class="btn btn-outline-secondary">
                            <i class="fas fa-arrow-left"></i> Continue Shopping
                        </a>
                    </div>
                </div>
            </div>

            <!-- Suggested Products -->
            <div class="card shadow-sm mt-4" id="suggestedProducts">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-lightbulb"></i> You might also like</h6>
                </div>
                <div class="card-body">
                    <div id="suggestedProductsList">
                        <!-- Suggested products will be loaded dynamically -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let cartData = [];

        document.addEventListener('DOMContentLoaded', function() {
            loadCart();
            loadSuggestedProducts();
        });

        async function loadCart() {
            const loading = document.getElementById('cartLoading');
            const cartItems = document.getElementById('cartItems');
            const emptyCart = document.getElementById('emptyCart');
            const summary = document.getElementById('cartSummary');
            const clearBtn = document.getElementById('clearCartBtn');

            loading.style.display = 'block';
            cartItems.innerHTML = '';
            emptyCart.style.display = 'none';
            summary.style.display = 'none';
            clearBtn.style.display = 'none';

            try {
                // Get cart items from server database
                const response = await fetch('/Cart/GetCartItems');
                const result = await response.json();
                
                if (!result.success) {
                    loading.style.display = 'none';
                    emptyCart.style.display = 'block';
                    return;
                }

                cartData = result.items;
                
                if (cartData.length === 0) {
                    loading.style.display = 'none';
                    emptyCart.style.display = 'block';
                    return;
                }

                displayCartItems(cartData);
                updateCartSummary(cartData);
                
                loading.style.display = 'none';
                summary.style.display = 'block';
                clearBtn.style.display = 'inline-block';
            } catch (error) {
                console.error('Error loading cart items:', error);
                loading.style.display = 'none';
                showToast('Error loading cart items', 'danger');
            }
        }

        function displayCartItems(items) {
            const container = document.getElementById('cartItems');
            
            container.innerHTML = items.map(item => `
                <div class="card mb-3">
                    <div class="row g-0">
                        <div class="col-md-3">
                            <img src="${item.Product.ImageUrl || 'https://via.placeholder.com/200x200/007bff/ffffff?text=Product'}" 
                                 class="img-fluid rounded-start h-100" alt="${item.Product.Name}"
                                 style="height: 150px; object-fit: cover;">
                        </div>
                        <div class="col-md-9">
                            <div class="card-body h-100 d-flex flex-column">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <h5 class="card-title">${item.Product.Name}</h5>
                                        <p class="text-muted">${item.Product.Brand}</p>
                                    </div>
                                    <button class="btn btn-outline-danger btn-sm" onclick="removeFromCart(${item.ProductId})">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                <div class="mt-auto">
                                    <div class="row align-items-center">
                                        <div class="col-md-4">
                                            <div class="input-group input-group-sm">
                                                <button class="btn btn-outline-secondary" type="button" 
                                                        onclick="updateQuantity(${item.ProductId}, ${item.Quantity - 1})">-</button>
                                                <input type="number" class="form-control text-center" 
                                                       value="${item.Quantity}" min="1" 
                                                       onchange="updateQuantity(${item.ProductId}, this.value)">
                                                <button class="btn btn-outline-secondary" type="button" 
                                                        onclick="updateQuantity(${item.ProductId}, ${item.Quantity + 1})">+</button>
                                            </div>
                                        </div>
                                        <div class="col-md-4 text-center">
                                            <span class="h6 text-primary">${item.Product.FinalPrice.toLocaleString()} VNĐ</span>
                                        </div>
                                        <div class="col-md-4 text-end">
                                            <span class="h5 text-success">${(item.Product.FinalPrice * item.Quantity).toLocaleString()} VNĐ</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function updateCartSummary(items) {
            const subtotal = items.reduce((sum, item) => sum + (item.Product.FinalPrice * item.Quantity), 0);
            const shipping = 0; // Free shipping
            const tax = subtotal * 0.1; // 10% tax
            const total = subtotal + shipping + tax;

            document.getElementById('subtotal').textContent = `${subtotal.toLocaleString()} VNĐ`;
            document.getElementById('shipping').textContent = shipping === 0 ? 'Free' : `${shipping.toLocaleString()} VNĐ`;
            document.getElementById('tax').textContent = `${tax.toLocaleString()} VNĐ`;
            document.getElementById('total').textContent = `${total.toLocaleString()} VNĐ`;
        }

        async function updateQuantity(productId, newQuantity) {
            newQuantity = parseInt(newQuantity);
            if (newQuantity < 1) {
                removeFromCart(productId);
                return;
            }

            try {
                // Find cartItemId from current cartData
                const cartItem = cartData.find(item => item.ProductId === productId);
                if (!cartItem) {
                    showToast('Item not found in cart', 'error');
                    return;
                }

                // Update quantity via server
                const formData = new FormData();
                formData.append('cartItemId', cartItem.CartItemId);
                formData.append('quantity', newQuantity);

                const response = await fetch('/Cart/UpdateQuantity', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    loadCart(); // Reload cart to update display
                    updateCartCounter();
                    showToast('Cart updated', 'success');
                } else {
                    showToast('Error updating cart', 'error');
                }
            } catch (error) {
                console.error('Error updating quantity:', error);
                showToast('Error updating cart', 'error');
            }
        }

        async function removeFromCart(productId) {
            try {
                // Find cartItemId from current cartData
                const cartItem = cartData.find(item => item.ProductId === productId);
                if (!cartItem) {
                    showToast('Item not found in cart', 'error');
                    return;
                }

                const formData = new FormData();
                formData.append('cartItemId', cartItem.CartItemId);

                const response = await fetch('/Cart/RemoveFromCart', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    loadCart(); // Reload cart to update display
                    updateCartCounter();
                    showToast('Item removed from cart', 'info');
                } else {
                    showToast('Error removing item', 'error');
                }
            } catch (error) {
                console.error('Error removing item:', error);
                showToast('Error removing item', 'error');
            }
        }

        async function clearCart() {
            if (!confirm('Are you sure you want to clear your cart?')) return;

            try {
                // Remove all items one by one
                for (const item of cartData) {
                    const formData = new FormData();
                    formData.append('cartItemId', item.CartItemId);

                    await fetch('/Cart/RemoveFromCart', {
                        method: 'POST',
                        body: formData
                    });
                }

                loadCart();
                updateCartCounter();
                showToast('Cart cleared', 'info');
            } catch (error) {
                console.error('Error clearing cart:', error);
                showToast('Error clearing cart', 'error');
            }
        }

        function proceedToCheckout() {
            if (cartData.length === 0) {
                showToast('Your cart is empty', 'warning');
                return;
            }

            window.location.href = '/Home/Checkout';
        }

        async function loadSuggestedProducts() {
            try {
                const response = await fetch('/api/products/featured?limit=3');
                if (response.ok) {
                    const products = await response.json();
                    displaySuggestedProducts(products.slice(0, 3));
                }
            } catch (error) {
                console.error('Error loading suggested products:', error);
            }
        }

        function displaySuggestedProducts(products) {
            const container = document.getElementById('suggestedProductsList');
            
            if (products.length === 0) return;

            container.innerHTML = products.map(product => `
                <div class="d-flex mb-3">
                    <img src="${product.imageUrl || 'https://via.placeholder.com/60x60/007bff/ffffff?text=Product'}" 
                         class="me-3 rounded" style="width: 60px; height: 60px; object-fit: cover;" alt="${product.name}">
                    <div class="flex-grow-1">
                        <h6 class="mb-1">${product.name}</h6>
                        <p class="text-muted small mb-1">${product.brand}</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="text-primary fw-bold">${product.finalPrice?.toLocaleString()} VNĐ</span>
                            <button class="btn btn-primary btn-sm" onclick="addToCartFromSuggested(${product.id})">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        async function addToCartFromSuggested(productId) {
            try {
                const formData = new FormData();
                formData.append('productId', productId);
                formData.append('quantity', 1);

                const response = await fetch('/Cart/AddToCart', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    loadCart();
                    updateCartCounter();
                    showToast('Product added to cart', 'success');
                } else {
                    showToast('Error adding product to cart', 'error');
                }
            } catch (error) {
                console.error('Error adding product:', error);
                showToast('Error adding product to cart', 'error');
            }
        }

        // Utility functions
        function showToast(message, type = 'info') {
            // Create a simple toast notification
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'error' ? 'danger' : type} position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
            `;
            document.body.appendChild(toast);

            // Auto remove after 3 seconds
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 3000);
        }

        async function updateCartCounter() {
            try {
                const response = await fetch('/Cart/GetCartCount');
                const result = await response.json();
                
                // Update cart counter in navigation if it exists
                const cartCounter = document.querySelector('.cart-count');
                if (cartCounter) {
                    cartCounter.textContent = result.count;
                }
            } catch (error) {
                console.error('Error updating cart counter:', error);
            }
        }
    </script>
} 